Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -nofastcall -const=RAM -
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE i2c_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\..\THIRDY~1\THIRDY~1\I2C.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_DATA
000000                     A     9    _inChar:
000000 00                  A    10    	DB	0
                           A    11    .define "inChar"
                           A    12    .alias "_inChar"
                           A    13    .class 69
                           A    14    .value _inChar
                           A    15    .type 2
                           A    16    .type 0
                           A    17    .endef
                           A    18    	SEGMENT i2c_TEXT
                           A    19    .begrec "fmt_type",16
                           A    20    .define "status"
                           A    21    .value 0
                           A    22    .class 8
                           A    23    .type 12
                           A    24    .type 0
                           A    25    .endef
                           A    26    .define "flags"
                           A    27    .value 1
                           A    28    .class 8
                           A    29    .type 12
                           A    30    .type 0
                           A    31    .endef
                           A    32    .define "size"
                           A    33    .value 2
                           A    34    .class 8
                           A    35    .type 2
                           A    36    .type 0
                           A    37    .endef
                           A    38    .define "chr"
                           A    39    .value 3
                           A    40    .class 8
                           A    41    .type 2
                           A    42    .type 0
                           A    43    .endef
                           A    44    .define "type"
                           A    45    .value 4
                           A    46    .class 8
                           A    47    .type 2
                           A    48    .type 0
                           A    49    .endef
                           A    50    .define "field_width"
                           A    51    .value 5
                           A    52    .class 8
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   2


PC     Object              I  Line    Source i2c.src
                           A    53    .type 2
                           A    54    .type 0
                           A    55    .endef
                           A    56    .define "precision"
                           A    57    .value 6
                           A    58    .class 8
                           A    59    .type 2
                           A    60    .type 0
                           A    61    .endef
                           A    62    .define "set_begin"
                           A    63    .value 7
                           A    64    .class 8
                           A    65    .type 162
                           A    66    .type 0
                           A    67    .endef
                           A    68    .define "set_end"
                           A    69    .value 9
                           A    70    .class 8
                           A    71    .type 162
                           A    72    .type 0
                           A    73    .endef
                           A    74    .define "pad_whole"
                           A    75    .value 11
                           A    76    .class 8
                           A    77    .type 12
                           A    78    .type 0
                           A    79    .endef
                           A    80    .define "pad_pre_fract"
                           A    81    .value 12
                           A    82    .class 8
                           A    83    .type 12
                           A    84    .type 0
                           A    85    .endef
                           A    86    .define "pad_post_fract"
                           A    87    .value 13
                           A    88    .class 8
                           A    89    .type 12
                           A    90    .type 0
                           A    91    .endef
                           A    92    .define "pad_at"
                           A    93    .value 14
                           A    94    .class 8
                           A    95    .type 162
                           A    96    .type 0
                           A    97    .endef
                           A    98    .endrec "fmt_type"
                           A    99    .begrec "flt_info",12
                           A   100    .define "flags"
                           A   101    .value 0
                           A   102    .class 8
                           A   103    .type 12
                           A   104    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   3


PC     Object              I  Line    Source i2c.src
                           A   105    .endef
                           A   106    .define "exp"
                           A   107    .value 1
                           A   108    .class 8
                           A   109    .type 2
                           A   110    .type 0
                           A   111    .endef
                           A   112    .define "digits"
                           A   113    .value 2
                           A   114    .class 8
                           A   115    .dim 10
                           A   116    .type 108
                           A   117    .type 0
                           A   118    .endef
                           A   119    .endrec "flt_info"
                           A   120    	SEGMENT FAR_BSS
000000                     A   121    _string:
000000                     A   122    	DS	25
                           A   123    .define "string"
                           A   124    .alias "_string"
                           A   125    .class 83
                           A   126    .value _string
                           A   127    .dim 25
                           A   128    .type 98
                           A   129    .type 0
                           A   130    .endef
                           A   131    	SEGMENT FAR_DATA
000001                     A   132    _txFinished:
000001 01                  A   133    	DB	1
                           A   134    .define "txFinished"
                           A   135    .alias "_txFinished"
                           A   136    .class 69
                           A   137    .value _txFinished
                           A   138    .type 2
                           A   139    .type 0
                           A   140    .endef
000002                     A   141    _command:
000002 00                  A   142    	DB	0
                           A   143    .define "command"
                           A   144    .alias "_command"
                           A   145    .class 69
                           A   146    .value _command
                           A   147    .type 2
                           A   148    .type 0
                           A   149    .endef
000003                     A   150    _rxFlag:
000003 00                  A   151    	DB	0
                           A   152    .define "rxFlag"
                           A   153    .alias "_rxFlag"
                           A   154    .class 69
                           A   155    .value _rxFlag
                           A   156    .type 2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   4


PC     Object              I  Line    Source i2c.src
                           A   157    .type 0
                           A   158    .endef
                           A   159    	SEGMENT FAR_BSS
000019                     A   160    _gyroRead:
000019                     A   161    	DS	6
                           A   162    .define "gyroRead"
                           A   163    .alias "_gyroRead"
                           A   164    .class 83
                           A   165    .value _gyroRead
                           A   166    .dim 6
                           A   167    .type 98
                           A   168    .type 0
                           A   169    .endef
00001F                     A   170    _accRead:
00001F                     A   171    	DS	6
                           A   172    .define "accRead"
                           A   173    .alias "_accRead"
                           A   174    .class 83
                           A   175    .value _accRead
                           A   176    .dim 6
                           A   177    .type 98
                           A   178    .type 0
                           A   179    .endef
000025                     A   180    _acc_xh:
000025                     A   181    	DS	1
                           A   182    .define "acc_xh"
                           A   183    .alias "_acc_xh"
                           A   184    .class 83
                           A   185    .value _acc_xh
                           A   186    .type 2
                           A   187    .type 0
                           A   188    .endef
000026                     A   189    _acc_xl:
000026                     A   190    	DS	1
                           A   191    .define "acc_xl"
                           A   192    .alias "_acc_xl"
                           A   193    .class 83
                           A   194    .value _acc_xl
                           A   195    .type 2
                           A   196    .type 0
                           A   197    .endef
000027                     A   198    _acc_yh:
000027                     A   199    	DS	1
                           A   200    .define "acc_yh"
                           A   201    .alias "_acc_yh"
                           A   202    .class 83
                           A   203    .value _acc_yh
                           A   204    .type 2
                           A   205    .type 0
                           A   206    .endef
000028                     A   207    _acc_yl:
000028                     A   208    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   5


PC     Object              I  Line    Source i2c.src
                           A   209    .define "acc_yl"
                           A   210    .alias "_acc_yl"
                           A   211    .class 83
                           A   212    .value _acc_yl
                           A   213    .type 2
                           A   214    .type 0
                           A   215    .endef
000029                     A   216    _acc_y:
000029                     A   217    	DS	1
                           A   218    .define "acc_y"
                           A   219    .alias "_acc_y"
                           A   220    .class 83
                           A   221    .value _acc_y
                           A   222    .type 2
                           A   223    .type 0
                           A   224    .endef
00002A                     A   225    _acc_x:
00002A                     A   226    	DS	1
                           A   227    .define "acc_x"
                           A   228    .alias "_acc_x"
                           A   229    .class 83
                           A   230    .value _acc_x
                           A   231    .type 2
                           A   232    .type 0
                           A   233    .endef
00002B                     A   234    _gyro_h:
00002B                     A   235    	DS	1
                           A   236    .define "gyro_h"
                           A   237    .alias "_gyro_h"
                           A   238    .class 83
                           A   239    .value _gyro_h
                           A   240    .type 2
                           A   241    .type 0
                           A   242    .endef
00002C                     A   243    _gyro_l:
00002C                     A   244    	DS	1
                           A   245    .define "gyro_l"
                           A   246    .alias "_gyro_l"
                           A   247    .class 83
                           A   248    .value _gyro_l
                           A   249    .type 2
                           A   250    .type 0
                           A   251    .endef
00002D                     A   252    _gyro_val:
00002D                     A   253    	DS	2*1
                           A   254    .define "gyro_val"
                           A   255    .alias "_gyro_val"
                           A   256    .class 83
                           A   257    .value _gyro_val
                           A   258    .type 3
                           A   259    .type 0
                           A   260    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   6


PC     Object              I  Line    Source i2c.src
00002F                     A   261    _accXValue:
00002F                     A   262    	DS	2*1
                           A   263    .define "accXValue"
                           A   264    .alias "_accXValue"
                           A   265    .class 83
                           A   266    .value _accXValue
                           A   267    .type 3
                           A   268    .type 0
                           A   269    .endef
000031                     A   270    _accYValue:
000031                     A   271    	DS	2*1
                           A   272    .define "accYValue"
                           A   273    .alias "_accYValue"
                           A   274    .class 83
                           A   275    .value _accYValue
                           A   276    .type 3
                           A   277    .type 0
                           A   278    .endef
000033                     A   279    _accZValue:
000033                     A   280    	DS	2*1
                           A   281    .define "accZValue"
                           A   282    .alias "_accZValue"
                           A   283    .class 83
                           A   284    .value _accZValue
                           A   285    .type 3
                           A   286    .type 0
                           A   287    .endef
000035                     A   288    _gyroXValue:
000035                     A   289    	DS	2*1
                           A   290    .define "gyroXValue"
                           A   291    .alias "_gyroXValue"
                           A   292    .class 83
                           A   293    .value _gyroXValue
                           A   294    .type 3
                           A   295    .type 0
                           A   296    .endef
000037                     A   297    _gyroYValue:
000037                     A   298    	DS	2*1
                           A   299    .define "gyroYValue"
                           A   300    .alias "_gyroYValue"
                           A   301    .class 83
                           A   302    .value _gyroYValue
                           A   303    .type 3
                           A   304    .type 0
                           A   305    .endef
000039                     A   306    _gyroZValue:
000039                     A   307    	DS	2*1
                           A   308    .define "gyroZValue"
                           A   309    .alias "_gyroZValue"
                           A   310    .class 83
                           A   311    .value _gyroZValue
                           A   312    .type 3
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   7


PC     Object              I  Line    Source i2c.src
                           A   313    .type 0
                           A   314    .endef
00003B                     A   315    _t1Ready:
00003B                     A   316    	DS	1
                           A   317    .define "t1Ready"
                           A   318    .alias "_t1Ready"
                           A   319    .class 83
                           A   320    .value _t1Ready
                           A   321    .type 2
                           A   322    .type 0
                           A   323    .endef
                           A   324    	SEGMENT FAR_DATA
000004                     A   325    _speed:
000004 0000                A   326    	DW	0
                           A   327    .define "speed"
                           A   328    .alias "_speed"
                           A   329    .class 69
                           A   330    .value _speed
                           A   331    .type 3
                           A   332    .type 0
                           A   333    .endef
000006                     A   334    _printI2Cq:
000006 00                  A   335    	DB	0
                           A   336    .define "printI2Cq"
                           A   337    .alias "_printI2Cq"
                           A   338    .class 69
                           A   339    .value _printI2Cq
                           A   340    .type 2
                           A   341    .type 0
                           A   342    .endef
                           A   343    .begrec "NONAME0",7
                           A   344    .define "reading"
                           A   345    .value 0
                           A   346    .class 8
                           A   347    .type 2
                           A   348    .type 0
                           A   349    .endef
                           A   350    .define "cycle"
                           A   351    .value 1
                           A   352    .class 8
                           A   353    .type 2
                           A   354    .type 0
                           A   355    .endef
                           A   356    .define "deviceAddress"
                           A   357    .value 2
                           A   358    .class 8
                           A   359    .type 12
                           A   360    .type 0
                           A   361    .endef
                           A   362    .define "registerAddress"
                           A   363    .value 3
                           A   364    .class 8
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   8


PC     Object              I  Line    Source i2c.src
                           A   365    .type 12
                           A   366    .type 0
                           A   367    .endef
                           A   368    .define "bytesToRead"
                           A   369    .value 4
                           A   370    .class 8
                           A   371    .type 12
                           A   372    .type 0
                           A   373    .endef
                           A   374    .define "storePtr"
                           A   375    .value 5
                           A   376    .class 8
                           A   377    .type 172
                           A   378    .type 0
                           A   379    .endef
                           A   380    .endrec "NONAME0"
                           A   381    	SEGMENT FAR_BSS
00003C                     A   382    _state:
00003C                     A   383    	DS	7
                           A   384    .define "state"
                           A   385    .alias "_state"
                           A   386    .class 83
                           A   387    .value _state
                           A   388    .tag "NONAME0"
                           A   389    .type 8
                           A   390    .type 0
                           A   391    .endef
                           A   392    	SEGMENT ROM_DATA
                           A   393    
                           A   394    
                           A   395    ;**************************** _i2cInit ********
                           A   396    ;Name                         Addr/Register   S
                           A   397    ;_state                              STATIC    
                           A   398    ;_Si2c_Isr                           IMPORT  --
                           A   399    ;_SET_VECTOR                         IMPORT  --
                           A   400    
                           A   401    
                           A   402    ; Aggregate Stack Size: 0 (words)
                           A   403    
                           A   404    
                           A   405    	.FRAME _n_i2cInit,?_n_i2cInit,RDATA
                           A   406    	.FRAME _f_i2cInit,?_f_i2cInit,EDATA
                           A   407    	SEGMENT i2c_TEXT
000000                     A   408    _i2cInit:
                           A   409    .define "_i2cInit"
                           A   410    .value _i2cInit
                           A   411    .class 2
                           A   412    .type 65
                           A   413    .type 0
                           A   414    .endef
                           A   415    .begfunc "i2cInit",74,"_i2cInit"
000000 D6 0000             A   416    	CALL	__b_frameset00
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:   9


PC     Object              I  Line    Source i2c.src
                           A   417    ;    1	// Code by Brian Bienvenu; Jim Cocks; B
                           A   418    ;    2	
                           A   419    ;    3	#include <eZ8.h>
                           A   420    ;    4	#include <STDIO.H>
                           A   421    ;    5	#include <uart.h>
                           A   422    ;    6	#include "i2c.h"
                           A   423    ;    7	#include <LCD.h>
                           A   424    ;    8	#include <STRING.H>
                           A   425    ;    9	#include <MATH.H>
                           A   426    ;   10	#include <MAIN.H>
                           A   427    ;   11	
                           A   428    ;   12	#define FAIL (0)
                           A   429    ;   13	#define PASS (1)
                           A   430    ;   14	#define AUTO_INC (0x80)
                           A   431    ;   15	#define READ_BIT (0x01)
                           A   432    ;   16	
                           A   433    ;   17	//IC2 Interrupt Enable
                           A   434    ;   18	#define IC2_EI (0x04) //0000 0100
                           A   435    ;   19	
                           A   436    ;   20	//Z8 definitions I2CCTL
                           A   437    ;   21	#define I2CEN_MASK	(0x80)
                           A   438    ;   22	#define START_MASK 	(0x40)
                           A   439    ;   23	#define STOP_MASK  	(0x20)
                           A   440    ;   24	#define TXI_MASK	(0x08)
                           A   441    ;   25	#define NAK_MASK	(0x04)
                           A   442    ;   26	#define FLUSH_MASK 	(0x02)
                           A   443    ;   27	//I2CSTAT
                           A   444    ;   28	#define TDRE_MASK  	(0x80)
                           A   445    ;   29	#define RDRF_MASK	(0x40)
                           A   446    ;   30	#define NCKI_MASK	(0x01)
                           A   447    ;   31	
                           A   448    ;   32	
                           A   449    ;   33	typedef char enum
                           A   450    ;   34	{
                           A   451    ;   35		FAILED = -1,
                           A   452    ;   36		BUSY = 0,
                           A   453    ;   37		DONE = 1
                           A   454    ;   38	} readState_t;
                           A   455    ;   39	
                           A   456    ;   40	typedef char enum
                           A   457    ;   41	{
                           A   458    ;   42		DEV_ADDESS_WRITE,
                           A   459    ;   43		DEV_SUB_ADDRESS,
                           A   460    ;   44		START_READ,
                           A   461    ;   45		DEV_ADDESS_READ,
                           A   462    ;   46		READ_BYTE,
                           A   463    ;   47		READ_LAST,
                           A   464    ;   48		END_CYCLE
                           A   465    ;   49	} cycle_t;
                           A   466    ;   50	
                           A   467    ;   51	typedef struct
                           A   468    ;   52	{
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  10


PC     Object              I  Line    Source i2c.src
                           A   469    ;   53		readState_t reading;
                           A   470    ;   54		cycle_t cycle;
                           A   471    ;   55		unsigned char deviceAddress;
                           A   472    ;   56		unsigned char registerAddress;
                           A   473    ;   57		unsigned char bytesToRead;
                           A   474    ;   58		unsigned char* storePtr;
                           A   475    ;   59	} i2cState_t;
                           A   476    ;   60	
                           A   477    ;   61	static i2cState_t state;
                           A   478    ;   62	//prototypes
                           A   479    ;   63	void Si2c_Isr(void);
                           A   480    ;   64	
                           A   481    ;   65	/**************************************
                           A   482    ;   66	Description:
                           A   483    ;   67		Initalises the i2c: ports, interrup
                           A   484    ;   68	Notes:
                           A   485    ;   69		doesn't perform and transactions
                           A   486    ;   70	Returns:
                           A   487    ;   71		0 <- fail, 1 pass
                           A   488    ;   72	***************************************
                           A   489    ;   73	void i2cInit(void)
                           A   490    ;   74	{
                           A   491    ;   75		//PA6 and PA7
                           A   492    ;   76		//Set Pins to I2C function
                           A   493    ;   77		PAAF |= 0xC0; 	//1100 0000
                           A   494    .line 77
000003 E9020FD0            A   495    	LDX	4048,#2
000007 49C00FD1            A   496    	ORX	4049,#192
                           A   497    ;   78	
                           A   498    ;   79		//set baud rate
                           A   499    ;   80		I2CBRH = (I2C_BAUD_DIV >> 8);
                           A   500    .line 80
00000B E9000F53            A   501    	LDX	3923,#-0
                           A   502    ;   81		I2CBRL = (I2C_BAUD_DIV & 0xFF);
                           A   503    .line 81
00000F E90C0F54            A   504    	LDX	3924,#12
                           A   505    ;   82	
                           A   506    ;   83		//clear txi
                           A   507    ;   84		I2CCTL &= ~TXI_MASK;
                           A   508    .line 84
000013 59F70F52            A   509    	ANDX	3922,#-9
                           A   510    ;   85		//disable I2C control register
                           A   511    ;   86		I2CCTL &= ~I2CEN_MASK;
                           A   512    .line 86
000017 597F0F52            A   513    	ANDX	3922,#127
                           A   514    ;   87	
                           A   515    ;   88		//set isr for I2C
                           A   516    ;   89		SET_VECTOR(I2C,Si2c_Isr);
                           A   517    ;   90		//set I2C isr to highest priority
                           A   518    ;   91		IRQ0ENH |= IC2_EI;
                           A   519    .line 91
00001B 49040FC1            A   520    	ORX	4033,#4
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  11


PC     Object              I  Line    Source i2c.src
                           A   521    ;   92		IRQ0ENL |= IC2_EI;
                           A   522    .line 92
00001F 49040FC2            A   523    	ORX	4034,#4
                           A   524    ;   93	
                           A   525    ;   94		//Port D int1_g and int1_A interrup
                           A   526    ;   95	// 	IRQ1ENH |= 0x03;
                           A   527    ;   96	// 	IRQ1ENL |= 0x03;
                           A   528    ;   97	// 	IRQPS |= 0x03;
                           A   529    ;   98	// 	DI();
                           A   530    ;   99	// 	PCAF &= ~0x02;
                           A   531    ;  100		//set Timers to PWM mode, no presca
                           A   532    ;  101	// 	T1CTL1 = 0x21; //CONTINUOUS_MODE | 
                           A   533    ;  102		//set reset count value to 0
                           A   534    ;  103	// 	T1H = 0;
                           A   535    ;  104	// 	T1L = 0;
                           A   536    ;  105		//set reload value
                           A   537    ;  106	// 	T1RH = 0xC3; //50000
                           A   538    ;  107	// 	T1RL = 0x50;
                           A   539    ;  108	
                           A   540    ;  109	// 	T1CTL1 |= 0x80;
                           A   541    ;  110	
                           A   542    ;  111	// 	IRQ0ENH |= 0x40;
                           A   543    ;  112	// 	IRQ0ENL |= 0x40;
                           A   544    ;  113	
                           A   545    ;  114	// 	SET_VECTOR(TIMER1, t1_mem_isr);
                           A   546    ;  115	// 	EI();
                           A   547    ;  116		
                           A   548    ;  117		//init internal state so it doesn't
                           A   549    ;  118		state.reading = DONE;
                           A   550    .line 118
000023 E901003C            A   551    	LDX	_state,#1
                           A   552    ;  119	}
                           A   553    .line 119
000027 D6 0000             A   554    	CALL	__b_framereset
00002A AF                  A   555    	RET	
                           A   556    .endfunc "i2cInit",119,"_i2cInit"
                           A   557    	SEGMENT ROM_DATA
                           A   558    
                           A   559    
                           A   560    ;**************************** _i2cWrite *******
                           A   561    ;Name                         Addr/Register   S
                           A   562    ;_EI                                 IMPORT  --
                           A   563    ;_DI                                 IMPORT  --
                           A   564    ;ret                                     R0    
                           A   565    ;dataByte                             R15+6    
                           A   566    ;registerAddress                      R15+5    
                           A   567    ;deviceAddress                        R15+4    
                           A   568    
                           A   569    
                           A   570    ; Aggregate Stack Size: 0 (words)
                           A   571    
                           A   572    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  12


PC     Object              I  Line    Source i2c.src
                           A   573    	.FRAME _n_i2cWrite,?_n_i2cWrite,RDATA
                           A   574    	.FRAME _f_i2cWrite,?_f_i2cWrite,EDATA
                           A   575    	SEGMENT i2c_TEXT
00002B                     A   576    _i2cWrite:
                           A   577    .define "_i2cWrite"
                           A   578    .value _i2cWrite
                           A   579    .class 2
                           A   580    .type 76
                           A   581    .type 0
                           A   582    .endef
                           A   583    .begfunc "i2cWrite",132,"_i2cWrite"
                           A   584    .define "deviceAddress"
                           A   585    .class 9
                           A   586    .value 4
                           A   587    .type 12
                           A   588    .type 0
                           A   589    .endef
                           A   590    .define "registerAddress"
                           A   591    .class 9
                           A   592    .value 5
                           A   593    .type 12
                           A   594    .type 0
                           A   595    .endef
                           A   596    .define "dataByte"
                           A   597    .class 9
                           A   598    .value 6
                           A   599    .type 12
                           A   600    .type 0
                           A   601    .endef
                           A   602    ;  120	
                           A   603    ;  121	/**************************************
                           A   604    ;  122	Description:
                           A   605    ;  123		Performs single byte i2c write
                           A   606    ;  124	Notes:
                           A   607    ;  125		Is blocking
                           A   608    ;  126		Doesn't use interrupts
                           A   609    ;  127		Don't use while performing a read
                           A   610    ;  128	Returns:
                           A   611    ;  129		1 <= successful, 0 <= failed
                           A   612    ;  130	***************************************
                           A   613    ;  131	unsigned char i2cWrite(unsigned char de
                           A   614    ;  132	{
                           A   615    .define "ret"
                           A   616    .class 4
                           A   617    .reg 1
                           A   618    .type 12
                           A   619    .type 0
                           A   620    .endef
00002B D6 0000             A   621    	CALL	__b_frameset00
                           A   622    ;  133		unsigned char ret;
                           A   623    ;  134		ret = FAIL;
                           A   624    .line 134
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  13


PC     Object              I  Line    Source i2c.src
00002E B0E0                A   625    	CLR	R0
                           A   626    ;  135		//disable interrupts
                           A   627    ;  136		DI();
                           A   628    .line 136
000030 8F                  A   629    	DI
                           A   630    ;  137		//enable I2C control register
                           A   631    ;  138		I2CCTL |= I2CEN_MASK;
                           A   632    .line 138
000031 49800F52            A   633    	ORX	3922,#128
                           A   634    ;  139	
                           A   635    ;  140		//wait till TDRE = 1
                           A   636    ;  141		while((I2CSTAT & TDRE_MASK) == 0x00
000035                     A   637    _2_L_1:
                           A   638    .line 141
000035 79800F51            A   639    	TMX	3921,#128
000039 6B FA               A   640    	JR	Z,_2_L_1
                           A   641    ;  142	
                           A   642    ;  143		//write device address to I2C data 
                           A   643    ;  144		I2CDATA = deviceAddress;
                           A   644    .line 144
00003B 881E04              A   645    	LDX	R1,4(RR14)
00003E 941F50              A   646    	LDX	3920,R1
                           A   647    ;  145	
                           A   648    ;  146		//assert start
                           A   649    ;  147		I2CCTL |= START_MASK;
                           A   650    .line 147
000041 49400F52            A   651    	ORX	3922,#64
                           A   652    ;  148	
                           A   653    ;  149		//wait till TDRE = 1
                           A   654    ;  150		while((I2CSTAT & TDRE_MASK) == 0x00
000045                     A   655    _2_L_4:
                           A   656    .line 150
000045 79800F51            A   657    	TMX	3921,#128
000049 6B FA               A   658    	JR	Z,_2_L_4
                           A   659    ;  151	
                           A   660    ;  152		//write device reg address to I2C d
                           A   661    ;  153		I2CDATA = registerAddress;
                           A   662    .line 153
00004B 881E05              A   663    	LDX	R1,5(RR14)
00004E 941F50              A   664    	LDX	3920,R1
                           A   665    ;  154	
                           A   666    ;  155		//wait till TDRE = 1 or error if NC
                           A   667    ;  156		while((I2CSTAT & (NCKI_MASK | TDRE_
000051                     A   668    _2_L_7:
                           A   669    .line 156
000051 79810F51            A   670    	TMX	3921,#129
000055 6B FA               A   671    	JR	Z,_2_L_7
                           A   672    ;  157		if((I2CSTAT & NCKI_MASK) == 0x00)
                           A   673    .line 157
000057 79010F51            A   674    	TMX	3921,#1
00005B EB 18               A   675    	JR	NE,_2_L_16
                           A   676    ;  158		{
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  14


PC     Object              I  Line    Source i2c.src
                           A   677    ;  159			//write dataByte to I2C data re
                           A   678    ;  160			I2CDATA = dataByte;
                           A   679    .line 160
00005D 881E06              A   680    	LDX	R1,6(RR14)
000060 941F50              A   681    	LDX	3920,R1
                           A   682    ;  161	
                           A   683    ;  162			//wait till TDRE = 1 or error i
                           A   684    ;  163			while((I2CSTAT & (NCKI_MASK | T
000063                     A   685    _2_L_9:
                           A   686    .line 163
000063 79810F51            A   687    	TMX	3921,#129
000067 6B FA               A   688    	JR	Z,_2_L_9
                           A   689    ;  164			if((I2CSTAT & NCKI_MASK) == 0x0
                           A   690    .line 164
000069 79010F51            A   691    	TMX	3921,#1
00006D EB 06               A   692    	JR	NE,_2_L_16
                           A   693    ;  165			{
                           A   694    ;  166				//set stop bit (if got to h
                           A   695    ;  167				I2CCTL |= STOP_MASK;
                           A   696    .line 167
00006F 49200F52            A   697    	ORX	3922,#32
                           A   698    ;  168				ret = PASS;
                           A   699    .line 168
000073 0C01                A   700    	LD	R0,#1
                           A   701    ;  169			}
                           A   702    ;  170		}
000075                     A   703    _2_L_16:
                           A   704    .line 170
                           A   705    ;  171	
                           A   706    ;  172		if(ret == FAIL)
                           A   707    .line 172
000075 4200                A   708    	OR	R0,R0
000077 EB 04               A   709    	JR	NE,_2_L_17
                           A   710    ;  173		{
                           A   711    ;  174			//set stop and flush bits
                           A   712    ;  175			I2CCTL |= (STOP_MASK | FLUSH_MA
                           A   713    .line 175
000079 49220F52            A   714    	ORX	3922,#34
                           A   715    ;  176		}
00007D                     A   716    _2_L_17:
                           A   717    .line 176
                           A   718    ;  177		//disable I2C control register
                           A   719    ;  178		//I2CCTL &= ~I2CEN_MASK;
                           A   720    ;  179		//enable interrupts
                           A   721    ;  180		EI();
                           A   722    .line 180
00007D 9F                  A   723    	EI
                           A   724    ;  181	}
                           A   725    .line 181
00007E D6 0000             A   726    	CALL	__b_framereset
000081 AF                  A   727    	RET	
                           A   728    .endfunc "i2cWrite",181,"_i2cWrite"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  15


PC     Object              I  Line    Source i2c.src
                           A   729    	SEGMENT ROM_DATA
                           A   730    
                           A   731    
                           A   732    ;**************************** _i2cStartRead ***
                           A   733    ;Name                         Addr/Register   S
                           A   734    ;_state                              STATIC    
                           A   735    ;dataLoc                              R15+7    
                           A   736    ;numToRead                            R15+6    
                           A   737    ;registerAddress                      R15+5    
                           A   738    ;deviceAddress                        R15+4    
                           A   739    
                           A   740    
                           A   741    ; Aggregate Stack Size: 0 (words)
                           A   742    
                           A   743    
                           A   744    	.FRAME _n_i2cStartRead,?_n_i2cStartRead,RDA
                           A   745    	.FRAME _f_i2cStartRead,?_f_i2cStartRead,EDA
                           A   746    	SEGMENT i2c_TEXT
000082                     A   747    _i2cStartRead:
                           A   748    .define "_i2cStartRead"
                           A   749    .value _i2cStartRead
                           A   750    .class 2
                           A   751    .type 65
                           A   752    .type 0
                           A   753    .endef
                           A   754    .begfunc "i2cStartRead",193,"_i2cStartRead"
                           A   755    .define "deviceAddress"
                           A   756    .class 9
                           A   757    .value 4
                           A   758    .type 12
                           A   759    .type 0
                           A   760    .endef
                           A   761    .define "registerAddress"
                           A   762    .class 9
                           A   763    .value 5
                           A   764    .type 12
                           A   765    .type 0
                           A   766    .endef
                           A   767    .define "numToRead"
                           A   768    .class 9
                           A   769    .value 6
                           A   770    .type 12
                           A   771    .type 0
                           A   772    .endef
                           A   773    .define "dataLoc"
                           A   774    .class 9
                           A   775    .value 7
                           A   776    .type 172
                           A   777    .type 0
                           A   778    .endef
000082 D6 0000             A   779    	CALL	__b_frameset00
                           A   780    ;  182	
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  16


PC     Object              I  Line    Source i2c.src
                           A   781    ;  183	/**************************************
                           A   782    ;  184	Description:
                           A   783    ;  185		Initiates numToRead i2c reads
                           A   784    ;  186	Notes:
                           A   785    ;  187		uses interrupts
                           A   786    ;  188		use i2cIsDataReady() to check when 
                           A   787    ;  189	Returns:
                           A   788    ;  190		none
                           A   789    ;  191	***************************************
                           A   790    ;  192	void i2cStartRead(unsigned char deviceA
                           A   791    ;  193	{
                           A   792    ;  194		//set reading flag
                           A   793    ;  195		state.reading = BUSY;
                           A   794    .line 195
000085 E900003C            A   795    	LDX	_state,#-0
                           A   796    ;  196		//set internals
                           A   797    ;  197		state.deviceAddress = deviceAddress
                           A   798    .line 197
000089 880E04              A   799    	LDX	R0,4(RR14)
00008C 94003E              A   800    	LDX	_state+2,R0
                           A   801    ;  198		state.registerAddress = registerAdd
                           A   802    .line 198
00008F 880E05              A   803    	LDX	R0,5(RR14)
000092 94003F              A   804    	LDX	_state+3,R0
                           A   805    ;  199		state.bytesToRead = numToRead;
                           A   806    .line 199
000095 880E06              A   807    	LDX	R0,6(RR14)
000098 940040              A   808    	LDX	_state+4,R0
                           A   809    ;  200		state.storePtr = dataLoc;
                           A   810    .line 200
00009B 880E07              A   811    	LDX	R0,7(RR14)
00009E 881E08              A   812    	LDX	R1,8(RR14)
0000A1 940041              A   813    	LDX	_state+5,R0
0000A4 941042              A   814    	LDX	_state+6,R1
                           A   815    ;  201		//set state
                           A   816    ;  202		state.cycle = DEV_ADDESS_WRITE;
                           A   817    .line 202
0000A7 E900003D            A   818    	LDX	_state+1,#-0
                           A   819    ;  203		//assert IEN
                           A   820    ;  204		I2CCTL |= I2CEN_MASK;
                           A   821    .line 204
0000AB 49800F52            A   822    	ORX	3922,#128
                           A   823    ;  205		//assert TXI bit
                           A   824    ;  206		I2CCTL |= TXI_MASK;
                           A   825    .line 206
0000AF 49080F52            A   826    	ORX	3922,#8
                           A   827    ;  207	}
                           A   828    .line 207
0000B3 D6 0000             A   829    	CALL	__b_framereset
0000B6 AF                  A   830    	RET	
                           A   831    .endfunc "i2cStartRead",207,"_i2cStartRead"
                           A   832    	SEGMENT ROM_DATA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  17


PC     Object              I  Line    Source i2c.src
                           A   833    
                           A   834    
                           A   835    ;**************************** _mems_read ******
                           A   836    ;Name                         Addr/Register   S
                           A   837    ;_gyroXValue                         STATIC    
                           A   838    ;_printMessage                       IMPORT  --
                           A   839    ;___print_sputch                     IMPORT  --
                           A   840    ;__u_stoa                            IMPORT  --
                           A   841    ;___print_putromstring               IMPORT  --
                           A   842    ;___print_out                        IMPORT    
                           A   843    ;_printI2CqF                         IMPORT  --
                           A   844    ;_accXValue                          STATIC    
                           A   845    ;_i2cIsDataReady                     IMPORT  --
                           A   846    ;_accRead                            STATIC    
                           A   847    ;_i2cStartRead                       IMPORT  --
                           A   848    ;_i2cWrite                           IMPORT  --
                           A   849    ;oldGyro                        <optimized>    
                           A   850    ;display                             R15-25    
                           A   851    
                           A   852    
                           A   853    ; Aggregate Stack Size: -25 (words)
                           A   854    
                           A   855    
                           A   856    	.FRAME _n_mems_read,?_n_mems_read,RDATA
                           A   857    	.FCALL _n_i2cWrite
                           A   858    	.FCALL _n_i2cStartRead
                           A   859    	.FCALL _n_i2cIsDataReady
                           A   860    	.FCALL _n_printI2CqF
                           A   861    	.FCALL _n___print_putromstring
                           A   862    	.FCALL _n__u_stoa
                           A   863    	.FCALL _n___print_sputch
                           A   864    	.FCALL _n_printMessage
                           A   865    	.FRAME _f_mems_read,?_f_mems_read,EDATA
                           A   866    	.FCALL _f_i2cWrite
                           A   867    	.FCALL _f_i2cStartRead
                           A   868    	.FCALL _f_i2cIsDataReady
                           A   869    	.FCALL _f_printI2CqF
                           A   870    	.FCALL _f___print_putromstring
                           A   871    	.FCALL _f__u_stoa
                           A   872    	.FCALL _f___print_sputch
                           A   873    	.FCALL _f_printMessage
                           A   874    	SEGMENT ROM_TEXT
000000                     A   875    L__16:
000000 41636320            A   876    	DB	"Acc "
000004 00                  A   877    	DB	0
                           A   878    	SEGMENT i2c_TEXT
0000B7                     A   879    _mems_read:
                           A   880    .define "_mems_read"
                           A   881    .value _mems_read
                           A   882    .class 2
                           A   883    .type 65
                           A   884    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  18


PC     Object              I  Line    Source i2c.src
                           A   885    .endef
                           A   886    .begfunc "mems_read",209,"_mems_read"
                           A   887    ;  208	
                           A   888    ;  209	void mems_read(void){
                           A   889    .define "display"
                           A   890    .class 1
                           A   891    .value -25
                           A   892    .dim 25
                           A   893    .type 98
                           A   894    .type 0
                           A   895    .endef
                           A   896    .define "oldGyro"
                           A   897    .class 4
                           A   898    .reg -1
                           A   899    .type 2
                           A   900    .type 0
                           A   901    .endef
0000B7 5C19                A   902    	LD	R5,#25
0000B9 D6 0000             A   903    	CALL	__b_frameset0
                           A   904    ;  210		char display[25];
                           A   905    ;  211		char oldGyro;
                           A   906    ;  212		char oldAcc;
                           A   907    ;  213		
                           A   908    ;  214			
                           A   909    ;  215		i2cWrite(ACCEL, REG1_A_ADDRESS, REG
                           A   910    .line 215
0000BC 1F7097              A   911    	PUSH	#151
0000BF 1F7020              A   912    	PUSH	#32
0000C2 1F7030              A   913    	PUSH	#48
0000C5 D6 002B             A   914    	CALL	_i2cWrite
0000C8 50E0                A   915    	POP	R0
0000CA 50E0                A   916    	POP	R0
0000CC 50E0                A   917    	POP	R0
                           A   918    ;  216		i2cWrite(ACCEL, REG4_A_ADDRESS, REG
                           A   919    .line 216
0000CE 1F7048              A   920    	PUSH	#72
0000D1 1F7023              A   921    	PUSH	#35
0000D4 1F7030              A   922    	PUSH	#48
0000D7 D6 002B             A   923    	CALL	_i2cWrite
0000DA 50E0                A   924    	POP	R0
0000DC 50E0                A   925    	POP	R0
0000DE 50E0                A   926    	POP	R0
                           A   927    ;  217		i2cWrite(GYRO, REG1_G_ADDRESS, REG1
                           A   928    .line 217
0000E0 1F70FF              A   929    	PUSH	#255
0000E3 1F7020              A   930    	PUSH	#32
0000E6 1F70D4              A   931    	PUSH	#212
0000E9 D6 002B             A   932    	CALL	_i2cWrite
0000EC 50E0                A   933    	POP	R0
0000EE 50E0                A   934    	POP	R0
0000F0 50E0                A   935    	POP	R0
                           A   936    ;  218		i2cWrite(GYRO, REG4_G_ADDRESS, REG4
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  19


PC     Object              I  Line    Source i2c.src
                           A   937    .line 218
0000F2 1F7040              A   938    	PUSH	#64
0000F5 1F7023              A   939    	PUSH	#35
0000F8 1F70D4              A   940    	PUSH	#212
0000FB D6 002B             A   941    	CALL	_i2cWrite
0000FE 50E0                A   942    	POP	R0
000100 50E0                A   943    	POP	R0
000102 50E0                A   944    	POP	R0
                           A   945    ;  219		i2cWrite(GYRO, REG5_G_ADDRESS, REG5
                           A   946    .line 219
000104 1F7010              A   947    	PUSH	#16
000107 1F7024              A   948    	PUSH	#36
00010A 1F70D4              A   949    	PUSH	#212
00010D D6 002B             A   950    	CALL	_i2cWrite
000110 50E0                A   951    	POP	R0
000112 50E0                A   952    	POP	R0
000114 50E0                A   953    	POP	R0
                           A   954    ;  220		
                           A   955    ;  221	
                           A   956    ;  222		i2cStartRead(ACCEL, X_LOW_ADDRESS, 
                           A   957    .line 222
000116 1F70 1F             A   958    	PUSH	#low(_accRead)
000119 1F70 00             A   959    	PUSH	#high(_accRead)
00011C 1F7002              A   960    	PUSH	#2
00011F 1F7028              A   961    	PUSH	#40
000122 1F7030              A   962    	PUSH	#48
000125 D6 0082             A   963    	CALL	_i2cStartRead
000128 50E0                A   964    	POP	R0
00012A 50E0                A   965    	POP	R0
00012C 50E0                A   966    	POP	R0
00012E 50E0                A   967    	POP	R0
000130 50E0                A   968    	POP	R0
                           A   969    ;  223	// 	i2cStartRead(ACCEL, X_HIGH_ADDRESS,
                           A   970    ;  224	// 	i2cStartRead(GYRO, RATE_LOW_ADDRESS
                           A   971    ;  225	
                           A   972    ;  226		while(i2cIsDataReady()==0){}
000132                     A   973    _4_L_20:
                           A   974    .line 226
000132 D6 03C1             A   975    	CALL	_i2cIsDataReady
000135 4200                A   976    	OR	R0,R0
000137 6B F9               A   977    	JR	Z,_4_L_20
                           A   978    ;  227		accXValue = accRead[1] & ((accRead[
                           A   979    .line 227
000139 841020              A   980    	LDX	R1,_accRead+1
00013C E4E1E0              A   981    	LD	R0,R1
00013F 90E0                A   982    	RL	R0
000141 3200                A   983    	SBC	R0,R0
000143 E8 01F02F           A   984    	LDX	_accXValue,_accRead
000147 E9000030            A   985    	LDX	_accXValue+1,#-0
00014B 58EE1030            A   986    	ANDX	_accXValue+1,R1
00014F 58EE002F            A   987    	ANDX	_accXValue,R0
                           A   988    ;  228	// 	accYValue = accRead[3] & ((accRead[
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  20


PC     Object              I  Line    Source i2c.src
                           A   989    ;  229	// 	accZValue = accRead[5] & ((accRead[
                           A   990    ;  230	// 	gyroXValue = gyroRead[0] & ((gyroRe
                           A   991    ;  231	// 	gyroYValue = gyroRead[2] & ((gyroRe
                           A   992    ;  232	// 	gyroZValue = gyroRead[4] & ((gyroRe
                           A   993    ;  233		
                           A   994    ;  234	// 	if(printI2CqF() && oldGyro != gyroX
                           A   995    ;  235		if(printI2CqF() && accXValue != 0){
                           A   996    .line 235
000153 D6 0000             A   997    	CALL	_printI2CqF
000156 4200                A   998    	OR	R0,R0
000158 6B 51               A   999    	JR	Z,_4_L_25
00015A 84002F              A  1000    	LDX	R0,_accXValue
00015D 48 030EE0           A  1001    	ORX	R0,_accXValue+1
000161 6B 48               A  1002    	JR	Z,_4_L_25
                           A  1003    ;  236			sprintf(display, "Acc %d", accX
                           A  1004    .line 236
000163 1CFF                A  1005    	LD	R1,#255
000165 0CE7                A  1006    	LD	R0,#231
000167 020F                A  1007    	ADD	R0,R15
000169 121E                A  1008    	ADC	R1,R14
00016B 941000              A  1009    	LDX	___print_out,R1
00016E 940001              A  1010    	LDX	___print_out+1,R0
000171 1F70 00             A  1011    	PUSH	#low(L__16)
000174 1F70 00             A  1012    	PUSH	#high(L__16)
000177 D6 0000             A  1013    	CALL	___print_putromstring
00017A 50E0                A  1014    	POP	R0
00017C 50E0                A  1015    	POP	R0
00017E C8 0300             A  1016    	PUSHX	_accXValue+1
000181 C8 02F0             A  1017    	PUSHX	_accXValue
000184 D6 0000             A  1018    	CALL	__u_stoa
000187 50E0                A  1019    	POP	R0
000189 50E0                A  1020    	POP	R0
00018B 1F7000              A  1021    	PUSH	#0
00018E D6 0000             A  1022    	CALL	___print_sputch
000191 50E0                A  1023    	POP	R0
                           A  1024    ;  237			printMessage(display, 1);
                           A  1025    .line 237
000193 1F7001              A  1026    	PUSH	#1
000196 1CFF                A  1027    	LD	R1,#255
000198 0CE7                A  1028    	LD	R0,#231
00019A 020F                A  1029    	ADD	R0,R15
00019C 121E                A  1030    	ADC	R1,R14
00019E 70E0                A  1031    	PUSH	R0
0001A0 70E1                A  1032    	PUSH	R1
0001A2 D6 0000             A  1033    	CALL	_printMessage
0001A5 50E0                A  1034    	POP	R0
0001A7 50E0                A  1035    	POP	R0
0001A9 50E0                A  1036    	POP	R0
                           A  1037    ;  238			oldGyro = gyroXValue;
                           A  1038    .line 238
                           A  1039    ;  239		}
                           A  1040    ;  240			
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  21


PC     Object              I  Line    Source i2c.src
                           A  1041    ;  241	// 	if(accXValue != 0 && t1Ready == 1){
                           A  1042    ;  242	// 		sprintf(display, "%f", compleme
                           A  1043    ;  243	// 		printMessage(display, 1);
                           A  1044    ;  244	// 		sendString("\r\n");
                           A  1045    ;  245	// 		t1Ready = 0;
                           A  1046    ;  246	// 	}
                           A  1047    ;  247		//LCD Display
                           A  1048    ;  248	// 	if(accXValue != 0){
                           A  1049    ;  249	
                           A  1050    ;  250	// 		sprintf(display, "%d", accXValu
                           A  1051    ;  251	// 		sendString(display);
                           A  1052    ;  252	// 		sendString("\r\n");
                           A  1053    ;  253	// 	}
                           A  1054    ;  254	}
0001AB                     A  1055    _4_L_25:
                           A  1056    .line 254
0001AB D6 0000             A  1057    	CALL	__b_framereset
0001AE AF                  A  1058    	RET	
                           A  1059    .endfunc "mems_read",254,"_mems_read"
                           A  1060    	SEGMENT ROM_DATA
                           A  1061    
                           A  1062    
                           A  1063    ;**************************** _printi2c *******
                           A  1064    ;Name                         Addr/Register   S
                           A  1065    
                           A  1066    
                           A  1067    ; Aggregate Stack Size: 0 (words)
                           A  1068    
                           A  1069    
                           A  1070    	.FRAME _n_printi2c,?_n_printi2c,RDATA
                           A  1071    	.FRAME _f_printi2c,?_f_printi2c,EDATA
                           A  1072    	SEGMENT i2c_TEXT
0001AF                     A  1073    _printi2c:
                           A  1074    .define "_printi2c"
                           A  1075    .value _printi2c
                           A  1076    .class 2
                           A  1077    .type 65
                           A  1078    .type 0
                           A  1079    .endef
                           A  1080    .begfunc "printi2c",256,"_printi2c"
0001AF D6 0000             A  1081    	CALL	__b_frameset00
                           A  1082    ;  255	
                           A  1083    ;  256	void printi2c(void){
                           A  1084    ;  257		char display[25];
                           A  1085    ;  258		
                           A  1086    ;  259	}
                           A  1087    .line 259
0001B2 D6 0000             A  1088    	CALL	__b_framereset
0001B5 AF                  A  1089    	RET	
                           A  1090    .endfunc "printi2c",259,"_printi2c"
                           A  1091    	SEGMENT ROM_DATA
                           A  1092    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  22


PC     Object              I  Line    Source i2c.src
                           A  1093    
                           A  1094    ;**************************** _complementary **
                           A  1095    ;Name                         Addr/Register   S
                           A  1096    ;_accXValue                          STATIC    
                           A  1097    ;_accZValue                          STATIC    
                           A  1098    ;_atan2                              IMPORT  --
                           A  1099    ;_gyroXValue                         STATIC    
                           A  1100    ;thetaAcc                            R15-12    
                           A  1101    ;thetaGyro                            R15-8    
                           A  1102    ;theta                                R15-4    
                           A  1103    
                           A  1104    
                           A  1105    ; Aggregate Stack Size: -12 (words)
                           A  1106    
                           A  1107    
                           A  1108    	.FRAME _n_complementary,?_n_complementary,R
                           A  1109    	.FCALL _n_atan2
                           A  1110    	.FRAME _f_complementary,?_f_complementary,E
                           A  1111    	.FCALL _f_atan2
                           A  1112    	SEGMENT i2c_TEXT
0001B6                     A  1113    _complementary:
                           A  1114    .define "_complementary"
                           A  1115    .value _complementary
                           A  1116    .class 2
                           A  1117    .type 70
                           A  1118    .type 0
                           A  1119    .endef
                           A  1120    .begfunc "complementary",261,"_complementary"
                           A  1121    ;  260	
                           A  1122    ;  261	float complementary(void){
                           A  1123    .define "theta"
                           A  1124    .class 1
                           A  1125    .value -4
                           A  1126    .type 6
                           A  1127    .type 0
                           A  1128    .endef
                           A  1129    .define "thetaGyro"
                           A  1130    .class 1
                           A  1131    .value -8
                           A  1132    .type 6
                           A  1133    .type 0
                           A  1134    .endef
                           A  1135    .define "thetaAcc"
                           A  1136    .class 1
                           A  1137    .value -12
                           A  1138    .type 6
                           A  1139    .type 0
                           A  1140    .endef
0001B6 5C0C                A  1141    	LD	R5,#12
0001B8 D6 0000             A  1142    	CALL	__b_frameset0
                           A  1143    ;  262		float thetaGyro = 0;
                           A  1144    .line 262
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  23


PC     Object              I  Line    Source i2c.src
0001BB B0E0                A  1145    	CLR	R0
0001BD B0E1                A  1146    	CLR	R1
0001BF B0E2                A  1147    	CLR	R2
0001C1 B0E3                A  1148    	CLR	R3
0001C3 89E0F8              A  1149    	LDX	-8(RR14),R0
0001C6 89E1F9              A  1150    	LDX	-7(RR14),R1
0001C9 89E2FA              A  1151    	LDX	-6(RR14),R2
0001CC 89E3FB              A  1152    	LDX	-5(RR14),R3
                           A  1153    ;  263		float thetaAcc = 0;
                           A  1154    .line 263
0001CF B0E0                A  1155    	CLR	R0
0001D1 B0E1                A  1156    	CLR	R1
0001D3 B0E2                A  1157    	CLR	R2
0001D5 B0E3                A  1158    	CLR	R3
0001D7 89E0F4              A  1159    	LDX	-12(RR14),R0
0001DA 89E1F5              A  1160    	LDX	-11(RR14),R1
0001DD 89E2F6              A  1161    	LDX	-10(RR14),R2
0001E0 89E3F7              A  1162    	LDX	-9(RR14),R3
                           A  1163    ;  264		float theta = 0;
                           A  1164    .line 264
0001E3 B0E0                A  1165    	CLR	R0
0001E5 B0E1                A  1166    	CLR	R1
0001E7 B0E2                A  1167    	CLR	R2
0001E9 B0E3                A  1168    	CLR	R3
0001EB 89E0FC              A  1169    	LDX	-4(RR14),R0
0001EE 89E1FD              A  1170    	LDX	-3(RR14),R1
0001F1 89E2FE              A  1171    	LDX	-2(RR14),R2
0001F4 89E3FF              A  1172    	LDX	-1(RR14),R3
                           A  1173    ;  265		
                           A  1174    ;  266		//Integrate gyro
                           A  1175    ;  267		thetaGyro += (float) gyroXValue * 0
                           A  1176    .line 267
0001F7 843036              A  1177    	LDX	R3,_gyroXValue+1
0001FA 842035              A  1178    	LDX	R2,_gyroXValue
0001FD E4E2E1              A  1179    	LD	R1,R2
000200 90E1                A  1180    	RL	R1
000202 3211                A  1181    	SBC	R1,R1
000204 E4E1E0              A  1182    	LD	R0,R1
000207 D6 0000             A  1183    	CALL	__b_fpltof
00020A 4C3D                A  1184    	LD	R4,#61
00020C 5C23                A  1185    	LD	R5,#35
00020E 6CD7                A  1186    	LD	R6,#215
000210 7C0A                A  1187    	LD	R7,#10
000212 D6 0000             A  1188    	CALL	__b_fpmul
000215 1FE8EE0E E4         A  1189    	LDWX	RR4,RR0
00021A 1FE8EE2E E6         A  1190    	LDWX	RR6,RR2
00021F 990EF8              A  1191    	LEA	RR0,248(RR14)
000222 D6 0000             A  1192    	CALL	__b_ldxlr0
000225 D6 0000             A  1193    	CALL	__b_fpadd
000228 994EF8              A  1194    	LEA	RR4,248(RR14)
00022B D6 0000             A  1195    	CALL	__b_stxlr0
                           A  1196    ;  268		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  24


PC     Object              I  Line    Source i2c.src
                           A  1197    ;  269		//Angle from accelerometer based on
                           A  1198    ;  270		thetaAcc = atan2((float) accXValue,
                           A  1199    .line 270
00022E 843034              A  1200    	LDX	R3,_accZValue+1
000231 842033              A  1201    	LDX	R2,_accZValue
000234 E4E2E1              A  1202    	LD	R1,R2
000237 90E1                A  1203    	RL	R1
000239 3211                A  1204    	SBC	R1,R1
00023B E4E1E0              A  1205    	LD	R0,R1
00023E D6 0000             A  1206    	CALL	__b_fpltof
000241 4C42                A  1207    	LD	R4,#66
000243 5C65                A  1208    	LD	R5,#101
000245 6C47                A  1209    	LD	R6,#71
000247 7CAE                A  1210    	LD	R7,#174
000249 D6 0000             A  1211    	CALL	__b_fpmul
00024C 70E3                A  1212    	PUSH	R3
00024E 70E2                A  1213    	PUSH	R2
000250 70E1                A  1214    	PUSH	R1
000252 70E0                A  1215    	PUSH	R0
000254 843030              A  1216    	LDX	R3,_accXValue+1
000257 84202F              A  1217    	LDX	R2,_accXValue
00025A E4E2E1              A  1218    	LD	R1,R2
00025D 90E1                A  1219    	RL	R1
00025F 3211                A  1220    	SBC	R1,R1
000261 E4E1E0              A  1221    	LD	R0,R1
000264 D6 0000             A  1222    	CALL	__b_fpltof
000267 70E3                A  1223    	PUSH	R3
000269 70E2                A  1224    	PUSH	R2
00026B 70E1                A  1225    	PUSH	R1
00026D 70E0                A  1226    	PUSH	R0
00026F D6 0000             A  1227    	CALL	_atan2
000272 2F                  A  1228    	ATM	
000273 09080FFF            A  1229    	ADDX	4095,#8
000277 19000FFE            A  1230    	ADCX	4094,#-0
00027B 89E0F4              A  1231    	LDX	-12(RR14),R0
00027E 89E1F5              A  1232    	LDX	-11(RR14),R1
000281 89E2F6              A  1233    	LDX	-10(RR14),R2
000284 89E3F7              A  1234    	LDX	-9(RR14),R3
                           A  1235    ;  271		
                           A  1236    ;  272		theta = 0.98*(thetaGyro + theta) + 
                           A  1237    .line 272
000287 994EFC              A  1238    	LEA	RR4,252(RR14)
00028A D6 0000             A  1239    	CALL	__b_ldxlr4
00028D 990EF8              A  1240    	LEA	RR0,248(RR14)
000290 D6 0000             A  1241    	CALL	__b_ldxlr0
000293 D6 0000             A  1242    	CALL	__b_fpadd
000296 4C3F                A  1243    	LD	R4,#63
000298 5C7A                A  1244    	LD	R5,#122
00029A 6CE1                A  1245    	LD	R6,#225
00029C 7C48                A  1246    	LD	R7,#72
00029E D6 0000             A  1247    	CALL	__b_fpmul
0002A1 1FE8EE0E E8         A  1248    	LDWX	RR8,RR0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  25


PC     Object              I  Line    Source i2c.src
0002A6 1FE8EE2E EA         A  1249    	LDWX	RR10,RR2
0002AB 4C3C                A  1250    	LD	R4,#60
0002AD 5CA3                A  1251    	LD	R5,#163
0002AF 6CD7                A  1252    	LD	R6,#215
0002B1 7C0A                A  1253    	LD	R7,#10
0002B3 990EF4              A  1254    	LEA	RR0,244(RR14)
0002B6 D6 0000             A  1255    	CALL	__b_ldxlr0
0002B9 D6 0000             A  1256    	CALL	__b_fpmul
0002BC 1FE8EE0E E4         A  1257    	LDWX	RR4,RR0
0002C1 1FE8EE2E E6         A  1258    	LDWX	RR6,RR2
0002C6 1FE8EE8E E0         A  1259    	LDWX	RR0,RR8
0002CB 1FE8EEAE E2         A  1260    	LDWX	RR2,RR10
0002D0 D6 0000             A  1261    	CALL	__b_fpadd
0002D3 994EFC              A  1262    	LEA	RR4,252(RR14)
0002D6 D6 0000             A  1263    	CALL	__b_stxlr0
                           A  1264    ;  273		
                           A  1265    ;  274		return theta;
                           A  1266    .line 274
0002D9 990EFC              A  1267    	LEA	RR0,252(RR14)
0002DC D6 0000             A  1268    	CALL	__b_ldxlr0
                           A  1269    ;  275	}
                           A  1270    .line 275
0002DF D6 0000             A  1271    	CALL	__b_framereset
0002E2 AF                  A  1272    	RET	
                           A  1273    .endfunc "complementary",275,"_complementary"
                           A  1274    	SEGMENT ROM_DATA
                           A  1275    ;	Jump Table for Switch Statement at line 321
000000                     A  1276    L__26:
000000 0004                A  1277    	DW	4
000002 0000                A  1278    	DW	0
000004 0345                A  1279    	DW	_7_L_30
000006 0001                A  1280    	DW	1
000008 0357                A  1281    	DW	_7_L_31
00000A 0002                A  1282    	DW	2
00000C 0371                A  1283    	DW	_7_L_35
00000E 0004                A  1284    	DW	4
000010 0397                A  1285    	DW	_7_L_39
000012 03BD                A  1286    	DW	_7_L_48
                           A  1287    
                           A  1288    
                           A  1289    ;**************************** _Si2c_Isr *******
                           A  1290    ;Name                         Addr/Register   S
                           A  1291    ;_state                              STATIC    
                           A  1292    
                           A  1293    
                           A  1294    ; Aggregate Stack Size: 0 (words)
                           A  1295    
                           A  1296    
                           A  1297    	.FRAME _n_Si2c_Isr,?_n_Si2c_Isr,RDATA
                           A  1298    	.FRAME _f_Si2c_Isr,?_f_Si2c_Isr,EDATA
                           A  1299    	SEGMENT i2c_TEXT
0002E3                     A  1300    _Si2c_Isr:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  26


PC     Object              I  Line    Source i2c.src
                           A  1301    .define "_Si2c_Isr"
                           A  1302    .value _Si2c_Isr
                           A  1303    .class 2
                           A  1304    .type 65
                           A  1305    .type 0
                           A  1306    .endef
                           A  1307    .begfunc "Si2c_Isr",286,"_Si2c_Isr"
0002E3 C8FFD0              A  1308    	PUSHX	4093
0002E6 D6 0000             A  1309    	CALL	__b_iframeset00
                           A  1310    ;  276	
                           A  1311    ;  277	/**************************************
                           A  1312    ;  278	Description: State machine handles
                           A  1313    ;  279			Nack interrupt
                           A  1314    ;  280			Empty Interrupt
                           A  1315    ;  281			Recieve interrupt
                           A  1316    ;  282	
                           A  1317    ;  283	***************************************
                           A  1318    ;  284	#pragma interrupt
                           A  1319    ;  285	void Si2c_Isr(void)
                           A  1320    ;  286	{
                           A  1321    ;  287		//Disable Interrupts
                           A  1322    ;  288		if(I2CSTAT & NCKI_MASK) //not ack i
                           A  1323    .line 288
0002E9 79010F51            A  1324    	TMX	3921,#1
0002ED 6B 3C               A  1325    	JR	Z,_7_L_47
                           A  1326    ;  289		{
                           A  1327    ;  290			//in read last byte statwe
                           A  1328    ;  291			if(state.cycle == READ_LAST)
                           A  1329    .line 291
0002EF A905003D            A  1330    	CPX	_state+1,#5
0002F3 EB 1F               A  1331    	JR	NE,_7_L_29
                           A  1332    ;  292			{
                           A  1333    ;  293				//read i2c data
                           A  1334    ;  294				*(state.storePtr) = I2CDATA
                           A  1335    .line 294
0002F5 840041              A  1336    	LDX	R0,_state+5
0002F8 841042              A  1337    	LDX	R1,_state+6
0002FB 842F50              A  1338    	LDX	R2,3920
0002FE 96E2E0              A  1339    	LDX	@RR0,R2
                           A  1340    ;  295				//assert stop
                           A  1341    ;  296				I2CCTL |= STOP_MASK;
                           A  1342    .line 296
000301 49200F52            A  1343    	ORX	3922,#32
                           A  1344    ;  297				//read cycle completed
                           A  1345    ;  298				state.cycle = END_CYCLE;
                           A  1346    .line 298
000305 E906003D            A  1347    	LDX	_state+1,#6
                           A  1348    ;  299				//clear reading ass samples
                           A  1349    ;  300				state.reading  = DONE;
                           A  1350    .line 300
000309 E901003C            A  1351    	LDX	_state,#1
                           A  1352    ;  301				//disable i2c
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  27


PC     Object              I  Line    Source i2c.src
                           A  1353    ;  302				I2CCTL &= ~I2CEN_MASK;
                           A  1354    .line 302
00030D 597F0F52            A  1355    	ANDX	3922,#127
                           A  1356    ;  303			}
                           A  1357    ;  304			else
                           A  1358    .line 304
000311 8D 03 BD            A  1359    	JR	_7_L_48
000314                     A  1360    _7_L_29:
                           A  1361    ;  305			{
                           A  1362    ;  306				//error
                           A  1363    ;  307				//set stop and flush bits
                           A  1364    ;  308				I2CCTL |= (STOP_MASK | FLUS
                           A  1365    .line 308
000314 49220F52            A  1366    	ORX	3922,#34
                           A  1367    ;  309				//clear txi
                           A  1368    ;  310				I2CCTL &= ~TXI_MASK;
                           A  1369    .line 310
000318 59F70F52            A  1370    	ANDX	3922,#-9
                           A  1371    ;  311				//reset state
                           A  1372    ;  312				state.cycle = END_CYCLE;
                           A  1373    .line 312
00031C E906003D            A  1374    	LDX	_state+1,#6
                           A  1375    ;  313				//report failure
                           A  1376    ;  314				state.reading  = FAILED;
                           A  1377    .line 314
000320 E9FF003C            A  1378    	LDX	_state,#-1
                           A  1379    ;  315				//disable i2c
                           A  1380    ;  316				I2CCTL &= ~I2CEN_MASK;
                           A  1381    .line 316
000324 597F0F52            A  1382    	ANDX	3922,#127
                           A  1383    ;  317			}
                           A  1384    ;  318		}
                           A  1385    ;  319		else if(I2CSTAT & (TDRE_MASK| RDRF_
                           A  1386    .line 319
000328 8D 03 BD            A  1387    	JR	_7_L_48
00032B                     A  1388    _7_L_47:
00032B 79C00F51            A  1389    	TMX	3921,#192
00032F 6D 03 BD            A  1390    	JR	Z,_7_L_48
                           A  1391    ;  320		{
                           A  1392    ;  321			switch (state.cycle)
                           A  1393    .line 321
000332 84103D              A  1394    	LDX	R1,_state+1
000335 E4E1E0              A  1395    	LD	R0,R1
000338 90E0                A  1396    	RL	R0
00033A 3200                A  1397    	SBC	R0,R0
00033C 2C 00               A  1398    	LD	R2,#high(L__26)
00033E 3C 00               A  1399    	LD	R3,#low(L__26)
000340 D6 0000             A  1400    	CALL	__b_ucase
000343 C4E0                A  1401    	JP	@RR0
                           A  1402    ;  322			{
                           A  1403    ;  323				case DEV_ADDESS_WRITE:
000345                     A  1404    _7_L_30:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  28


PC     Object              I  Line    Source i2c.src
                           A  1405    .line 323
                           A  1406    ;  324					//write device address 
                           A  1407    ;  325					I2CDATA = state.deviceA
                           A  1408    .line 325
000345 84003E              A  1409    	LDX	R0,_state+2
000348 E200                A  1410    	BCLR	0,R0
00034A 940F50              A  1411    	LDX	3920,R0
                           A  1412    ;  326					//assert start
                           A  1413    ;  327					I2CCTL |= START_MASK;
                           A  1414    .line 327
00034D 49400F52            A  1415    	ORX	3922,#64
                           A  1416    ;  328					//set to next state
                           A  1417    ;  329					state.cycle = DEV_SUB_A
                           A  1418    .line 329
000351 E901003D            A  1419    	LDX	_state+1,#1
                           A  1420    ;  330					break;
                           A  1421    .line 330
000355 8B 66               A  1422    	JR	_7_L_48
                           A  1423    ;  331				case DEV_SUB_ADDRESS:
000357                     A  1424    _7_L_31:
                           A  1425    .line 331
                           A  1426    ;  332					if(state.bytesToRead > 
                           A  1427    .line 332
000357 A9010040            A  1428    	CPX	_state+4,#1
00035B 3B 0A               A  1429    	JR	ULE,_7_L_33
                           A  1430    ;  333					{
                           A  1431    ;  334						//set first bit to 
                           A  1432    ;  335						I2CDATA = AUTO_INC 
                           A  1433    .line 335
00035D 84003F              A  1434    	LDX	R0,_state+3
000360 E2F0                A  1435    	BSET	7,R0
000362 940F50              A  1436    	LDX	3920,R0
                           A  1437    ;  336					}
                           A  1438    ;  337					else
                           A  1439    .line 337
000365 8B 04               A  1440    	JR	_7_L_34
000367                     A  1441    _7_L_33:
                           A  1442    ;  338					{
                           A  1443    ;  339						//write device sub 
                           A  1444    ;  340						I2CDATA = state.reg
                           A  1445    .line 340
000367 E8 03FF50           A  1446    	LDX	3920,_state+3
                           A  1447    ;  341					}
00036B                     A  1448    _7_L_34:
                           A  1449    .line 341
                           A  1450    ;  342					//need to wait till i2c
                           A  1451    ;  343					//set to next state
                           A  1452    ;  344					state.cycle = START_REA
                           A  1453    .line 344
00036B E902003D            A  1454    	LDX	_state+1,#2
                           A  1455    ;  345					break;
                           A  1456    .line 345
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  29


PC     Object              I  Line    Source i2c.src
00036F 8B 4C               A  1457    	JR	_7_L_48
                           A  1458    ;  346				case START_READ:
000371                     A  1459    _7_L_35:
                           A  1460    .line 346
                           A  1461    ;  347					//commence read cycle
                           A  1462    ;  348					//write device address 
                           A  1463    ;  349					I2CDATA = state.deviceA
                           A  1464    .line 349
000371 84003E              A  1465    	LDX	R0,_state+2
000374 E280                A  1466    	BSET	0,R0
000376 940F50              A  1467    	LDX	3920,R0
                           A  1468    ;  350					//assert start
                           A  1469    ;  351					I2CCTL |= START_MASK;
                           A  1470    .line 351
000379 49400F52            A  1471    	ORX	3922,#64
                           A  1472    ;  352					//clear TXI (stops tran
                           A  1473    ;  353					I2CCTL &= ~TXI_MASK;
                           A  1474    .line 353
00037D 59F70F52            A  1475    	ANDX	3922,#-9
                           A  1476    ;  354					if(state.bytesToRead ==
                           A  1477    .line 354
000381 A9010040            A  1478    	CPX	_state+4,#1
000385 EB 0A               A  1479    	JR	NE,_7_L_37
                           A  1480    ;  355					{
                           A  1481    ;  356						//set state to read
                           A  1482    ;  357						state.cycle = READ_
                           A  1483    .line 357
000387 E905003D            A  1484    	LDX	_state+1,#5
                           A  1485    ;  358						//set NACK bit will
                           A  1486    ;  359						I2CCTL |= NAK_MASK;
                           A  1487    .line 359
00038B 49040F52            A  1488    	ORX	3922,#4
                           A  1489    ;  360					}
                           A  1490    ;  361					else
                           A  1491    .line 361
00038F 8B 2C               A  1492    	JR	_7_L_48
000391                     A  1493    _7_L_37:
                           A  1494    ;  362					{
                           A  1495    ;  363						//set state to read
                           A  1496    ;  364						state.cycle = READ_
                           A  1497    .line 364
000391 E904003D            A  1498    	LDX	_state+1,#4
                           A  1499    ;  365					}
                           A  1500    .line 365
                           A  1501    ;  366	
                           A  1502    ;  367					break;
                           A  1503    .line 367
000395 8B 26               A  1504    	JR	_7_L_48
                           A  1505    ;  368				case READ_BYTE:
000397                     A  1506    _7_L_39:
                           A  1507    .line 368
                           A  1508    ;  369					//read i2c data
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  30


PC     Object              I  Line    Source i2c.src
                           A  1509    ;  370					*(state.storePtr) = I2C
                           A  1510    .line 370
000397 840041              A  1511    	LDX	R0,_state+5
00039A 841042              A  1512    	LDX	R1,_state+6
00039D 842F50              A  1513    	LDX	R2,3920
0003A0 96E2E0              A  1514    	LDX	@RR0,R2
                           A  1515    ;  371					//move next location
                           A  1516    ;  372					state.storePtr++;
                           A  1517    .line 372
0003A3 09010042            A  1518    	ADDX	_state+6,#1
0003A7 19000041            A  1519    	ADCX	_state+5,#-0
                           A  1520    ;  373					state.bytesToRead--;
                           A  1521    .line 373
0003AB 29010040            A  1522    	SUBX	_state+4,#1
                           A  1523    ;  374					if(state.bytesToRead ==
                           A  1524    .line 374
0003AF A9010040            A  1525    	CPX	_state+4,#1
0003B3 EB 08               A  1526    	JR	NE,_7_L_43
                           A  1527    ;  375					{
                           A  1528    ;  376						//set NACK bit will
                           A  1529    ;  377						I2CCTL |= NAK_MASK;
                           A  1530    .line 377
0003B5 49040F52            A  1531    	ORX	3922,#4
                           A  1532    ;  378						//set state to last
                           A  1533    ;  379						state.cycle = READ_
                           A  1534    .line 379
0003B9 E905003D            A  1535    	LDX	_state+1,#5
                           A  1536    ;  380					}
0003BD                     A  1537    _7_L_43:
                           A  1538    .line 380
                           A  1539    ;  381					break;
                           A  1540    ;  382				default:
                           A  1541    ;  383					//should not happen
                           A  1542    ;  384					break;
                           A  1543    ;  385			}
                           A  1544    ;  386		}
                           A  1545    ;  387	}
0003BD                     A  1546    _7_L_48:
                           A  1547    .line 387
0003BD D6 0000             A  1548    	CALL	__b_iframereset
0003C0 BF                  A  1549    	IRET	
                           A  1550    .endfunc "Si2c_Isr",387,"_Si2c_Isr"
                           A  1551    	SEGMENT ROM_DATA
                           A  1552    
                           A  1553    
                           A  1554    ;**************************** _i2cIsDataReady *
                           A  1555    ;Name                         Addr/Register   S
                           A  1556    ;_state                              STATIC    
                           A  1557    
                           A  1558    
                           A  1559    ; Aggregate Stack Size: 0 (words)
                           A  1560    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  31


PC     Object              I  Line    Source i2c.src
                           A  1561    
                           A  1562    	.FRAME _n_i2cIsDataReady,?_n_i2cIsDataReady
                           A  1563    	.FRAME _f_i2cIsDataReady,?_f_i2cIsDataReady
                           A  1564    	SEGMENT i2c_TEXT
0003C1                     A  1565    _i2cIsDataReady:
                           A  1566    .define "_i2cIsDataReady"
                           A  1567    .value _i2cIsDataReady
                           A  1568    .class 2
                           A  1569    .type 66
                           A  1570    .type 0
                           A  1571    .endef
                           A  1572    .begfunc "i2cIsDataReady",399,"_i2cIsDataReady"
0003C1 D6 0000             A  1573    	CALL	__b_frameset00
                           A  1574    ;  388	
                           A  1575    ;  389	/**************************************
                           A  1576    ;  390	Description:
                           A  1577    ;  391		gives the state of a i2c read
                           A  1578    ;  392	Notes:
                           A  1579    ;  393		is not valid until a i2cStartRead h
                           A  1580    ;  394	Returns:
                           A  1581    ;  395		read;
                           A  1582    ;  396		1 <= done, 0 <= busy , -1 <= failed
                           A  1583    ;  397	***************************************
                           A  1584    ;  398	char i2cIsDataReady(void)
                           A  1585    ;  399	{
                           A  1586    ;  400		return (char) state.reading;
                           A  1587    .line 400
0003C4 84003C              A  1588    	LDX	R0,_state
                           A  1589    ;  401	}
                           A  1590    .line 401
0003C7 D6 0000             A  1591    	CALL	__b_framereset
0003CA AF                  A  1592    	RET	
                           A  1593    .endfunc "i2cIsDataReady",401,"_i2cIsDataReady"
                           A  1594    	SEGMENT ROM_DATA
                           A  1595    
                           A  1596    
                           A  1597    ;**************************** _t1_mem_isr *****
                           A  1598    ;Name                         Addr/Register   S
                           A  1599    ;_EI                                 IMPORT  --
                           A  1600    ;_mems_read                          IMPORT  --
                           A  1601    ;_DI                                 IMPORT  --
                           A  1602    
                           A  1603    
                           A  1604    ; Aggregate Stack Size: 0 (words)
                           A  1605    
                           A  1606    
                           A  1607    	.FRAME _n_t1_mem_isr,?_n_t1_mem_isr,RDATA
                           A  1608    	.FCALL _n_mems_read
                           A  1609    	.FRAME _f_t1_mem_isr,?_f_t1_mem_isr,EDATA
                           A  1610    	.FCALL _f_mems_read
                           A  1611    	SEGMENT i2c_TEXT
0003CB                     A  1612    _t1_mem_isr:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  32


PC     Object              I  Line    Source i2c.src
                           A  1613    .define "_t1_mem_isr"
                           A  1614    .value _t1_mem_isr
                           A  1615    .class 2
                           A  1616    .type 65
                           A  1617    .type 0
                           A  1618    .endef
                           A  1619    .begfunc "t1_mem_isr",404,"_t1_mem_isr"
0003CB C8FFD0              A  1620    	PUSHX	4093
0003CE D6 0000             A  1621    	CALL	__b_iframeset00
                           A  1622    ;  402	
                           A  1623    ;  403	#pragma interrupt
                           A  1624    ;  404	void t1_mem_isr(void){
                           A  1625    ;  405		
                           A  1626    ;  406		DI();
                           A  1627    .line 406
0003D1 8F                  A  1628    	DI
                           A  1629    ;  407	
                           A  1630    ;  408		mems_read();
                           A  1631    .line 408
0003D2 D6 00B7             A  1632    	CALL	_mems_read
                           A  1633    ;  409		
                           A  1634    ;  410		EI();
                           A  1635    .line 410
0003D5 9F                  A  1636    	EI
                           A  1637    ;  411	// 	printMessage(display, 1);
                           A  1638    ;  412	}
                           A  1639    .line 412
0003D6 D6 0000             A  1640    	CALL	__b_iframereset
0003D9 BF                  A  1641    	IRET	
                           A  1642    .endfunc "t1_mem_isr",412,"_t1_mem_isr"
000012 02E3                A  1643    	VECTOR	I2C=_Si2c_Isr
                           A  1644    	XREF _printI2CqF:ROM
                           A  1645    	XREF _atan2:ROM
                           A  1646    	XREF _printMessage:ROM
                           A  1647    	XREF __u_stoa:ROM
                           A  1648    	XREF ___print_putromstring:ROM
                           A  1649    	XREF ___print_sputch:ROM
                           A  1650    	XREF ___print_out:EDATA
                           A  1651    	XREF __b_fpadd:ROM
                           A  1652    	XREF __b_fpltof:ROM
                           A  1653    	XREF __b_fpmul:ROM
                           A  1654    	XREF __b_ucase:ROM
                           A  1655    	XREF __b_framereset:ROM
                           A  1656    	XREF __b_iframereset:ROM
                           A  1657    	XREF __b_frameset0:ROM
                           A  1658    	XREF __b_frameset00:ROM
                           A  1659    	XREF __b_iframeset00:ROM
                           A  1660    	XREF __b_stxlr0:ROM
                           A  1661    	XREF __b_ldxlr0:ROM
                           A  1662    	XREF __b_ldxlr4:ROM
                           A  1663    	XDEF _t1_mem_isr
                           A  1664    	XDEF _i2cIsDataReady
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 21-Oct-16     12:44:33     page:  33


PC     Object              I  Line    Source i2c.src
                           A  1665    	XDEF _Si2c_Isr
                           A  1666    	XDEF _complementary
                           A  1667    	XDEF _printi2c
                           A  1668    	XDEF _mems_read
                           A  1669    	XDEF _i2cStartRead
                           A  1670    	XDEF _i2cWrite
                           A  1671    	XDEF _i2cInit
                           A  1672    	XDEF _printI2Cq
                           A  1673    	XDEF _speed
                           A  1674    	XDEF _t1Ready
                           A  1675    	XDEF _gyroZValue
                           A  1676    	XDEF _gyroYValue
                           A  1677    	XDEF _gyroXValue
                           A  1678    	XDEF _accZValue
                           A  1679    	XDEF _accYValue
                           A  1680    	XDEF _accXValue
                           A  1681    	XDEF _gyro_val
                           A  1682    	XDEF _gyro_l
                           A  1683    	XDEF _gyro_h
                           A  1684    	XDEF _acc_x
                           A  1685    	XDEF _acc_y
                           A  1686    	XDEF _acc_yl
                           A  1687    	XDEF _acc_yh
                           A  1688    	XDEF _acc_xl
                           A  1689    	XDEF _acc_xh
                           A  1690    	XDEF _accRead
                           A  1691    	XDEF _gyroRead
                           A  1692    	XDEF _rxFlag
                           A  1693    	XDEF _command
                           A  1694    	XDEF _txFinished
                           A  1695    	XDEF _string
                           A  1696    	XDEF _inChar
                           A  1697    	END


Errors: 0
Warnings: 0
Lines Assembled: 1698
